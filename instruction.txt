模糊测试
定义：通过向被测目标输入大量的畸形数据并监测其异常来发现漏洞
关键：测试用例构造，自动化。
优点：无须源码、误报低、自动化程度高
缺点：覆盖率低
工具：Peach、Sulley、Autodafe、SPIKE等

模糊测试阶段：
确定测试目标
确定输入向量：是否能找到所有的输入向量是模糊测试能否成功的关键。
生成模糊测试数据
执行模糊测试数据
监视异常：一定要对异常和错误有监视，否则不知道是什么数据触发faults，则这次模糊测试就没有意义
判定发现的漏洞是否可能被利用：这种过程是典型的手工过程，需要操作者具有特定的安全知识。

黑盒测试与模糊测试
黑盒测试的主要作用:
黑盒测试法注重于测试软件的功能需求，主要试图发现下列几类错误。

1.功能不正确或遗漏；
2.界面错误；
3.输入和输出错误；
4.数据库访问错误；
5.性能错误；
6.初始化和终止错误等。
模糊测试
模糊测试（Fuzzing），是一种通过向目标系统提供非预期的输入并监视异常结果来发现软件漏洞的方法。
主要是通过输入大量数据，发现程序中存在的问题。可以通过使程序某些内容溢出出现异常，
或者输入的是程序规定的范围内的数据结果出现异常，从而找出程序的bug。


模糊测试技术未来的研究热点可能包括以下几个方面.
5.1 提高测试用例的通过率
以网络协议的模糊测试为例,即使我们通过模糊测试技术生成了大量的畸形测试数据,
但这些测试数据中的绝大部分会被网络协议的校验机制所拒绝,这样的测试效率是极低的. 
所以我们并不能用大量的纯随机数据来测试网络协议,而是应该构建出通过率更高的测试用例, 
例如, 可以将模糊测试配置成使用已知有效数据、故意错误数据和随机数据的组合,
这样既可以提高测试用例的通过率也不会使测试用例过多的受测试人员的主观影响. 
再如,也可以在随机测试数据后面增添校验位, 或者在了解待测网络协议的数据包格式后
构造出符合规定的测试用例,这些方法可能大幅度提高测试用例的通过率.
5.2 协议格式自动化分析
正如 5.1 小节所述,对文件、协议格式的深刻理解可以帮助测试人员构建出通过率很高的测试用例,
但这繁琐复杂的测前准备工作也给测试工具开发人员带来很大的负担, 
可以设想,即使针对一个简单的非公开协议也需要花费编程人员大量的时间研究目标协议的工作规范, 
更何况,待测试的网络协议规范很可能是未经公开的. 这就指明了模糊测试技术未来的另一个发展方向, 
即实现文件、协议格式的自动化分析.
5.3 引进并行和分布式技术
模糊测试技术最大的一个特点是可以生成数量巨大的测试用例, 从而使对软件进行全方位测试成为可能. 
但巨大的测试用例数量也带来了执行效率低的缺点. 因此, 引进并行和分布式技术, 有效的减少测试时间. 
这或许会为未来构造出更大量的测试用例提供良好基础.
5.4 基于知识库构造测试用例
如何提高测试数据的针对性也是模糊测试技术未来发展必须解决的一个问题
可以通过为模糊测试工具连接一个数据库提高测试用例的针对性.假设这个数据库中
存储着大量已知的攻击模式,在构造测试用例时,通过从该数据库调用能引起已知攻击的
测试数据并在后面加上随机数据的方法来构造针对性强的测试用例.
 也可以在该数据库中存储一些有用的资源,例如一些常见系统、数据库和Web 应用的用户名和密码字典,
 常用的脚本后门程序,服务器响应信息等,这些资源能有助于测试人员构造出能顺利通过系统检测的测试数据包, 
也方便测试人员研究和发现应用程序的安全漏洞.
5.5 提高代码覆盖率
在构造测试用例过程中无法估算代码覆盖率是模糊测试技术的重大缺陷之一.
代码覆盖率是软件测试中的一种度量, 描述程式中源代码被测试的比例和程度. 
代码覆盖率常常被拿来作为衡量测试用例好坏的指标, 所以提高代码覆盖率是提高模糊测试效率的一种有效方式. 
同时, 如果在构建测试用例时不知道这些测试用例的代码覆盖率, 则很难判断测试的完成情况,
 更不清楚是否发现了软件中的所有漏洞.可以通过引入遗传算法达到提高代码覆盖率的目的,
也可以在模糊测试工具中集成代码覆盖率计算工具,实现实时监测当前代码覆盖率的功能.

5.6 更多平台的支持
目前, 几乎所有的模糊测试工具都只能运行在桌面操作系统上, 
而对于支持智能手机等嵌入式操作系统的模糊测试工具还需要进一步的研究.
另外,大多的模糊测试工具还不具有跨平台的能力,大多只能测试单一操作系统的软件漏洞.
因此,研究具有跨平台,支持多种软硬件平台的模糊测试工具非常有价值.
5.7 模糊测试的智能化
不能发现鉴权绕过和后门等逻辑上的错误一直是模糊测试技术无法规避的一个重大缺点.
可以研究在生成测试用例的过程中引入知识或一些人工智能算法,使得模糊测试工具具有学习的能力,
从而在一定程度上具备发现逻辑漏洞的能力.模糊测试技术的另一个缺点是不能对漏洞进行准确定位,
即通过模糊测试技术只能判断出待测软件中存在何种漏洞并不能准确的定位到程序源代码中是
哪一行引发了这个漏洞,可以研究通过结合动态二进制插装或提高监视器的监测精度来克服这个问题.